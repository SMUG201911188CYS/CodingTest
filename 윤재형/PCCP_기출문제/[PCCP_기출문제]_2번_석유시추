#include <string>
#include <vector>

using namespace std;

int m, n;
int map[501][501];
int visit[501][501];

int dx[4] = {1, -1, 0, 0};
int dy[4] = {0, 0, 1, -1};

int area = 0;
int check[501];
int ans[501];

void DFS(int x, int y) {
    for(int i = 0; i < 4; i++)
    {
        int nx = x + dx[i];
        int ny = y + dy[i];
        if(nx < 1 || ny < 1 || nx > n || ny > m) continue;
        if(visit[nx][ny] == 1) continue;
        if(map[nx][ny] == 0) continue;

        if(check[ny] == 0) check[ny] = 1;

        visit[nx][ny] = 1;
        area++;
        DFS(nx, ny);
    }
}

int solution(vector<vector<int>> land) {
    n = land.size();
    m = land[0].size();

    for(int i = 1; i <= n; i++)
        for(int j = 1; j <= m; j++)
            map[i][j] = land[i - 1][j - 1];

    for(int i = 1; i <= m; i++)
        for(int j = 1; j <= n; j++)
        {
            if(map[j][i] == 0) continue;
            if(visit[j][i] == 1) continue;

            visit[j][i] = 1;
            check[i] = 1;
            area++;

            DFS(j, i);

            for(int k = 1; k <= m; k++)
                if(check[k] == 1)
                {
                    check[k] = 0;
                    ans[k] += area;
                }

            area = 0; 
        }

    int answer = -1;
    for(int i = 1; i <= m; i++)
        answer = max(answer, ans[i]);
    
    return answer;
}
